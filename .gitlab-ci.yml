variables:
  # Cela permet de déterminer en tant que qui/quoi on se connecte à k8s.
  KUBE_CONTEXT: labs-iut-info/labsagent:labsagentiut # A quoi sert cette ligne ?
  KUBECTL: "kubectl --insecure-skip-tls-verify"
  K8S_NAMESPACE: ns-sae5-x21

.symfony:
  before_script:
    - cd sfapi
    - touch .env

stages:
  - build
  - code-quality
  - sonarqube
  - deploy

build:
  stage: build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker info
  tags:
    - docker
  script:
    - docker build . -t but3/x21/sae5-api-${CI_COMMIT_SHORT_SHA} -f ./Dockerfile
    - docker tag but3/x21/sae5-api-${CI_COMMIT_SHORT_SHA} $CI_REGISTRY/$CI_PROJET/$DOCKER_IMAGE_TAG
    - docker push $CI_REGISTRY/$CI_PROJET/$DOCKER_IMAGE_TAG

    - docker build . -t but3/x21/sae5-nginx-${CI_COMMIT_SHORT_SHA} -f ./build/nginx/prod/Dockerfile
    - docker tag but3/x21/sae5-nginx-${CI_COMMIT_SHORT_SHA} $CI_REGISTRY/$CI_PROJET/nginx
    - docker push $CI_REGISTRY/$CI_PROJET/nginx
  only:
    - main

build-dev:
  stage: build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker info
  tags:
    - docker
  script:
    - docker build . -t but3/x21/sae5-api-${CI_COMMIT_SHORT_SHA}-dev -f ./Dockerfile
    - docker tag but3/x21/sae5-api-${CI_COMMIT_SHORT_SHA}-dev $CI_REGISTRY/$CI_PROJET/${DOCKER_IMAGE_TAG}-dev
    - docker push $CI_REGISTRY/$CI_PROJET/${DOCKER_IMAGE_TAG}-dev

    - docker build . -t but3/x21/sae5-nginx-${CI_COMMIT_SHORT_SHA}-dev -f ./build/nginx/dev/Dockerfile
    - docker tag but3/x21/sae5-nginx-${CI_COMMIT_SHORT_SHA}-dev $CI_REGISTRY/$CI_PROJET/nginx-dev
    - docker push $CI_REGISTRY/$CI_PROJET/nginx-dev
  only:
    - dev
    - task/kong-gateaway

# Étape de lint pour PHP
lint:
  stage: code-quality
  extends: [.symfony]
  # Utilisation d'une image PHP CLI pour exécuter les commandes.
  image: php:8.2-cli
  tags:
    - docker
  before_script:
    - apt-get update && apt-get install -y git unzip # Installer les dépendances nécessaires comme Composer.
    - curl -sS https://getcomposer.org/installer | php # Installer Composer.
    - echo "a" | php composer.phar require --dev squizlabs/php_codesniffer # Installation silencieuse de PHP CodeSniffer avec réponse automatique "a".
    - php composer.phar install # Installation des dépendances PHP via Composer.
  script:
    - vendor/bin/phpcs --standard=PSR12 sfapi/src/ # Exécution de PHP CodeSniffer pour vérifier la qualité du code.

sonarqube-check:
  tags :
    - docker
  stage: sonarqube
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - dev

.kube-context:
  before_script:
    # Si la variable d'environnement KUBE_CONTEXT est définie, on l'utilise avec kubectl pour le configurer
    - if [ -n "$KUBE_CONTEXT" ]; then kubectl config use-context "$KUBE_CONTEXT"; fi # Quel est le rôle de ce script ?

deploy:
  stage: deploy
  extends: [.kube-context]
  tags :
    - docker
  environment:
    name: production
    url: https://sae5-x21-api.labs.iut-larochelle.fr
  image: roffe/kubectl:v1.13.0
  script:
    - if ! $KUBECTL get ns | grep $K8S_NAMESPACE ; then $KUBECTL create namespace $K8S_NAMESPACE ; fi
    - $KUBECTL delete --ignore-not-found=true secret gitlab-auth --namespace=$K8S_NAMESPACE
    - $KUBECTL create secret docker-registry gitlab-auth --docker-server=${CI_REGISTRY} --docker-username=${CI_REGISTRY_USER} --docker-password=${CI_JOB_TOKEN} --namespace=${K8S_NAMESPACE}
    - $KUBECTL delete --ignore-not-found=true -f k8s/prod/
    - cat k8s/prod/dep-database.yml | envsubst | $KUBECTL apply -f -
    - cat k8s/prod/dep-sfapi.yml | envsubst | $KUBECTL apply -f -
    - cat k8s/prod/dep-nginx.yml | envsubst | $KUBECTL apply -f -
    - cat k8s/prod/svc-database.yml | $KUBECTL apply -f -
    - cat k8s/prod/svc-sfapi.yml | $KUBECTL apply -f -
    - cat k8s/prod/svc-nginx.yml | $KUBECTL apply -f -
    - cat k8s/prod/ingress.yml | $KUBECTL apply -f -
  only:
    - main

deploy-dev:
  stage: deploy
  extends: [.kube-context]
  tags :
    - docker
  environment:
    name: development
    url: https://sae5-x21-api-dev.labs.iut-larochelle.fr
  image: roffe/kubectl:v1.13.0 # Pourquoi utilisons-nous cette image ?
  script:
    - if ! $KUBECTL get ns | grep $K8S_NAMESPACE ; then $KUBECTL create namespace $K8S_NAMESPACE ; fi
    - $KUBECTL delete --ignore-not-found=true secret gitlab-auth --namespace=$K8S_NAMESPACE
    - $KUBECTL create secret docker-registry gitlab-auth --docker-server=${CI_REGISTRY} --docker-username=${CI_REGISTRY_USER} --docker-password=${CI_JOB_TOKEN} --namespace=${K8S_NAMESPACE}
    - $KUBECTL delete --ignore-not-found=true -f k8s/dev/
    - cat k8s/dev/dep-database.yml | envsubst | $KUBECTL apply -f -
    - cat k8s/dev/dep-sfapi.yml | envsubst | $KUBECTL apply -f -
    - cat k8s/dev/dep-nginx.yml | envsubst | $KUBECTL apply -f -
    - cat k8s/dev/svc-database.yml | $KUBECTL apply -f -
    - cat k8s/dev/svc-sfapi.yml | $KUBECTL apply -f -
    - cat k8s/dev/svc-nginx.yml | $KUBECTL apply -f -
    - cat k8s/dev/ingress.yml | $KUBECTL apply -f -
  only:
    - dev
    - task/kong-gateaway